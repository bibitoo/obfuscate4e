#summary Getting started
#labels Phase-Deploy,Featured

<wiki:toc/>

=Configure the obfuscation=

Now it's time to configure how _obfuscate4e_ and its embedded obfuscator should work. We use the ProGuard obfuscator in this sectin. The configuration of other obfuscators will differ.

Execute the action _Create Proguard obfuscation configuration_ from the context menu of the plugin _MANIFEST.MF_.

http://obfuscate4e.googlecode.com/svn/wiki/images/generate_custombuildcallbacks.png

In the project folder appear two new files: _customBuildCallbacks.xml_ and _proguard.cfg_. These files are managed inside your project (and also version controlled).

https://obfuscate4e.googlecode.com/svn/wiki/images/new_custombuildcallbacks.png

ProGuard allows to highly customize the obfuscation process. You can add cunfiguration statements to the _proguard.cfg_ file. See <a href="http://proguard.sourceforge.net/manual/usage.html">http://proguard.sourceforge.net/manual/usage.html</a> for valid configuration parameters.

==Excluding classes or packages from obfuscation==

Obfuscate4e detects exported packages and and writes the corresponding obfuscation exclusion statements automatically into the file _proguard.cfg_ at your plugin's root directory.

Starting from version 0.7 of _obfuscate4e_ all classes references from plugin extensions (in _plugin.xml_) are automatically inserted into the obfuscator exclusion list. Thus the obfuscate4e configuration should be updated whenever a new extension is added to the plugin.<br>
_Remark: This feature works only on Eclipse 3.4 (there seems to be a bug or non-implemented feature in Eclipse 3.2 and 3.3)_

Of course you can add custom exclusion statements by hand. For instance If a class gets instantiated via reflection or is referenced by name in any other way, it has to be excluded.

===Exclude all classes in a package===

By default _obfuscate4e_ adds all exported packages of a plugin to the exclusion list.

There are to options if you want to add other packages to the exclution list:<!--break-->

  # Export the package using the Manifest editor (if this is useful for your project)
  # Add a following lines to the plugin's _proguard.cfg_ file:
    {{{
-keep class de.example.plugin.* {
  public protected *; 
}
    }}}
  _Remark: If you modified the proguard.cfg file manually, then these changes will be lost when re-generating the configuration!_

===Exclude a single class===

You might want to exclude a certain file from obfuscation. This might be the case if the class is used in an extension of your plugin.<!--break-->

To exclude a class from obfuscation you have to add a statement like

{{{
-keep class de.example.plugin.actions.MySpecialAction {
  public protected *;
}
}}}

to the _proguard.cfg_ file. All other classes in the package _de.example.plugin.actions_ are completely obfuscated.

_Remark: If you modified the proguard.cfg file manually, then these changes will be lost when re-generating the configuration!_

===Exclude all classes of a certain kind===

To exclude all classes that implement a certain interface or extend a certain class (e.g. all views, actions, perspectives, wizards, ...) in a generic way you need to exclude the appropriate interfaces or super classes:

{{{
-keep class * extends org.eclipse.ui.part.ViewPart {
  public *;
}
-keep class * implements org.eclipse.jface.action.IAction {
  public *;
}
-keep class * implements org.eclipse.ui.IPerspectiveFactory {
  public *;
}
-keep class * implements org.eclipse.equinox.app.IApplication {
  public *;
}
-keep class * implements org.eclipse.jface.wizard.IWizard {
  public *;
}
}}}

To exclude all access methods (getters and setters) there is another generic way:

{{{
-keep class * implements org.example.AnyInterface {
  void set*(***);
  void set*(int, ***);
  boolean is*();
  boolean is*(int);
  *** get*();
  *** get*(int);
}
}}}

_Remark: If you modified the `proguard.cfg` file manually, then these changes will be lost when re-generating the configuration!_

=Obfuscate your code=

It's time to use your obfuscator. As it is embedded into the built process Eclipse runs the obfuscator when exporting a plugin, a project or a complete product.

Export a plugin with _File > Export ..._

https://obfuscate4e.googlecode.com/svn/wiki/images/export_plugin_preview.png

The plugin will be obfuscated and exported.

If you <a href="http://obfuscate4e.org/run-the-obfuscator-in-verbose-mode">run the obfuscation in "verbose" mode</a>, then you can see ant processing the plugin and&nbsp; check the applied names mapping in the file _proguard.map_. This file is located in the folder _temp.folder/_ of the plugin. This file shows a list of processed files as well as the names of class, fields and methods after obfuscation.

https://obfuscate4e.googlecode.com/svn/wiki/images/proguard_map_preview.png